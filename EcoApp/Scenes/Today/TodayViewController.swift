//
//  TodayViewController.swift
//  Ecobalance life
//
//  Created by Artem on 20.06.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ParseSwift

protocol TodayDisplayLogic: AnyObject
{
    func displaySomething(viewModel: Today.Something.ViewModel)
}

class TodayViewController: UITableViewController, TodayDisplayLogic
{
    var interactor: TodayBusinessLogic?
    var router: (NSObjectProtocol & TodayRoutingLogic & TodayDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TodayInteractor()
        let presenter = TodayPresenter()
        let router = TodayRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBOutlet weak var checklistView: TodayChecklistView!
    
    var subscription: SubscriptionCallback<Checklist>!
    
    override func viewDidLoad() {
        super.viewDidLoad()  
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.getChecklist() { [weak self] result in
            switch result {
            case .success(let checklist):
                self?.checklistView.configure(with: checklist)
            case .failure(let error):
                print(error)
            }
        }
    }
    

    func displaySomething(viewModel: Today.Something.ViewModel) {
    }
}
