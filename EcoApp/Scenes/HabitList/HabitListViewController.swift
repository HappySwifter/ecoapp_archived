//
//  HabitListViewController.swift
//  EcoApp
//
//  Created by Artem on 28.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol HabitListDisplayLogic: AnyObject
{
    func display(viewModel: HabitList.ViewModel)
}

class HabitListViewController: UIViewController, HabitListDisplayLogic
{
    var interactor: HabitListBusinessLogic?
    var router: (NSObjectProtocol & HabitListRoutingLogic & HabitListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HabitListInteractor()
        let presenter = HabitListPresenter()
        let router = HabitListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    enum Section {
      case main
    }
    
    var refreshControl: UIRefreshControl!
    @IBOutlet weak var accountButton: UIButton!
    @IBOutlet weak var collectionView: UICollectionView!
    typealias DataSource = UICollectionViewDiffableDataSource<Section, Habit>
    typealias Snapshot = NSDiffableDataSourceSnapshot<Section, Habit>
    lazy var dataSource = makeDataSource()
    var habits = [Habit]()
        
    override func viewDidLoad() {
        super.viewDidLoad()
        refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(fullRefresh), for: .valueChanged)
        collectionView.refreshControl = refreshControl
        
        collectionView.delegate = self

        configureLayout()
        reloadHabits()
//        interactor?.mockHabits(count: 1)
//        interactor?.mockFacts()
//        interactor?.mockLikes()
    }
    
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        accountButton.setTitle(User.current?.username ?? "Вход", for: .normal)
    }


    
    @objc func fullRefresh() {
        refreshControl.endRefreshing()
        reloadHabits()
    }

    func reloadHabits() {
        let req = HabitList.Request(type: .getHabits(habits: []))
        interactor?.make(request: req)
    }
    
    
    func display(viewModel: HabitList.ViewModel) {
        switch viewModel.type {
        case .success(let api):
            switch api {
            case .getHabits(let habits):
                self.habits = habits
                applySnapshot(habbits: habits)
            case .likeHabit(let habit),
                 .dislikeHabit(let habit),
                 .addFact(let habit):
                
                Log("mutate successful for: \(habit.name ?? "--"), habit like: \(String(describing: habit.isLiked ?? false))", type: .info)

                for (index, _) in habits.enumerated() {
                    if habits[index].objectId == habit.objectId {
                        habits[index].isLiked = habit.isLiked
//                        habits[index].lastFactDate = habit.lastFactDate
                        break
                    }
                }
                let habitToReload = habits.filter{ $0.objectId == habit.objectId }.first
                applySnapshot(animatingDifferences: false, habbits: habits, reloadHabit: habitToReload)
            case .getChallenges(let challenges):
                break
            }
        case .failure(let error):
            switch error {
            case .parseError(let parseError):
                Log("\(parseError.message), \(parseError.localizedDescription)", type: .error)
            case .notConnected:
                Log("Нет соединения с сервером", type: .error)
            case .ubauthorized:
                Log("Не авторизован", type: .error)
            }
            
        }
    }
    
    @IBAction func logout() {
        router?.routeToProfileOrLogin()
    }
    

}
