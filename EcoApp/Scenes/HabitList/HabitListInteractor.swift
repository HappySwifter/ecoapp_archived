//
//  HabitListInteractor.swift
//  EcoApp
//
//  Created by Artem on 28.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ParseSwift



protocol HabitListBusinessLogic
{
    func make(request: HabitList.Request)
}

protocol HabitListDataStore
{
}

class HabitListInteractor: HabitListBusinessLogic, HabitListDataStore
{
  var presenter: HabitListPresentationLogic?
  var worker: HabitListWorker?
    
    
    func make(request: HabitList.Request) {
        guard appDelegate.isConnectedToServer() else {
            let res = HabitList.Response(type: .failure(.notConnected))
            presenter?.presentResponse(response: res)
            return
        }
        guard let _ = User.current else {
            let res = HabitList.Response(type: .failure(.ubauthorized))
            presenter?.presentResponse(response: res)
            return
        }
        switch request.type {
        case .getHabits:
            getHabitList(request: request)
        case .addToCheckList(let habit):
            addToChecklist(habit: habit, request: request)
        case .removeFromChecklist(let habit):
            removeFromChecklist(habit: habit, request: request)
        case .addFact(let habit):
            setHabitFact(habit: habit, request: request)
        }
    }
    
    func addToChecklist(habit: Habit, request: HabitList.Request) {
        let cloud = Cloud(functionJobName: "addToChecklist",
                          habit: habit,
                          frequency: habit.frequency!)
        cloud.runFunction { [weak self] result in
            switch result {
            case .success(let habit):
                Log("habit liked \(habit)", type: .info)
                let type = HabitList.addToCheckList(habit: habit)
                let res = HabitList.Response(type: .success(type))
                self?.presenter?.presentResponse(response: res)
            case .failure(let error):
                let res = HabitList.Response(type: .failure(.parseError(error: error)))
                self?.presenter?.presentResponse(response: res)
            }
        }
    }
    
    func removeFromChecklist(habit: Habit, request: HabitList.Request) {
        let cloud = RemoveFromChecklist(functionJobName: "removeFromChecklist",
                          habit: habit)
        cloud.runFunction { [weak self] result in
            switch result {
            case .success(let habit):
                Log("habit unliked \(habit)", type: .info)
                let type = HabitList.removeFromChecklist(habit: habit)
                let res = HabitList.Response(type: .success(type))
                self?.presenter?.presentResponse(response: res)
            case .failure(let error):
                let res = HabitList.Response(type: .failure(.parseError(error: error)))
                self?.presenter?.presentResponse(response: res)
            }
        }
    }
    
    func getHabitList(request: HabitList.Request) {
        let cloud = GetHabitsCloud(functionJobName: "getHabits")
        cloud.runFunction { [weak self] result in
            switch result {
            case .success(let habits):
                Log("habits count \(habits.count)", type: .info)
                
                let withFacts = habits
                    .filter{ $0.lastFactDate != nil }
                    .map{ "\($0.name ?? "") -> \($0.lastFactDate)" }
                print(withFacts)
                
                
                let type = HabitList.getHabits(habits: habits)
                let res = HabitList.Response(type: .success(type))
                self?.presenter?.presentResponse(response: res)
            case .failure(let error):
                let res = HabitList.Response(type: .failure(.parseError(error: error)))
                self?.presenter?.presentResponse(response: res)
            }
        }
    }
    
    func setHabitFact(habit: Habit, request: HabitList.Request) {
        let cloud = CreateFactCloud(functionJobName: "createFact",
                                    habit: habit, frequency: habit.frequency!)
        cloud.runFunction { [weak self] result in
            switch result {
            case .success(let habits):
//                for habit in habits {
//                    print("name", habit.name!, ":  _created_at", habit.facts?.first?._created_at?.fullDateString() ?? "")
//                    print("habit", habit)
//                    Log("fact added \(habit.objectId ?? "") facts: \(habit.facts)", type: .info)
//                }
                let type = HabitList.addFact(habit: habit)
                let res = HabitList.Response(type: .success(type))
                self?.presenter?.presentResponse(response: res)
            case .failure(let error):
                let res = HabitList.Response(type: .failure(.parseError(error: error)))
                self?.presenter?.presentResponse(response: res)
            }
        }
    }

}



struct Cloud: ParseCloud {
    typealias ReturnType = Habit
    var functionJobName: String
    var habit: Habit
    var frequency: Int
    //var argument1: [String: Int] = ["test": 5]
}

struct RemoveFromChecklist: ParseCloud {
    typealias ReturnType = Habit
    var functionJobName: String
    var habit: Habit
}

struct CreateFactCloud: ParseCloud {
    typealias ReturnType = [Habit]
    var functionJobName: String
    var habit: Habit
    var frequency: Int
}

struct GetHabitsCloud: ParseCloud {
    typealias ReturnType = [Habit]
    var functionJobName: String
}
