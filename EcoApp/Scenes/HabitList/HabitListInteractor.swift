//
//  HabitListInteractor.swift
//  EcoApp
//
//  Created by Artem on 28.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ParseSwift



protocol HabitListBusinessLogic
{
    typealias HabitResult = ((Result<[Habit], ParseError>) -> Void)
    func getHabitList(cb: @escaping HabitResult)
    func setHabitFact(habit: Habit)
    func runCloud()
    func addToChecklist(habit: Habit)
}

protocol HabitListDataStore
{
  //var name: String { get set }
}

class HabitListInteractor: HabitListBusinessLogic, HabitListDataStore
{
  var presenter: HabitListPresentationLogic?
  var worker: HabitListWorker?
  //var name: String = ""
  
  
    
    func addToChecklist(habit: Habit) {
        let cloud = Cloud(functionJobName: "addToChecklist",
                          habit: habit,
                          frequency: habit.frequency!)
//        cloud.startJob { _ in }
        cloud.runFunction { result in
            switch result {
            case .success(let response):
                print("Response from cloud function: \(response)")
            case .failure(let error):
                print("Error calling cloud function: \(error)")
            }
        }
    }
    
    
    func getHabitList(cb: @escaping HabitResult) {
        if appDelegate.isConnectedToServer() {
            Habit.query().findAll { result in
                switch result {
                case .success(let habbits):
                    for habbit in habbits {
                        habbit.saveHabit()
                    }
                    cb(.success(habbits))
                case .failure(let error):
                    print(error)
                    cb(.failure(error))
                }
            }
        } else {
            Log("server is not reachable", type: .error)
        }
    }
    
    func setHabitFact(habit: Habit) {
        guard let user = User.current else {
            return
        }
        let habitFact = HabitFact(habit: habit, user: user, points: habit.points)
        habitFact.save { result in
            switch result {
            case .success(let fact):
                fact.fetch { result in
                    switch result {
                    case .success:
                        break
                    case .failure(let error):
                        Log(error.message, type: .error)
                    }
                }
            case .failure(let error):
                Log(error.message, type: .error)
            }
        }
    }
    
    func runCloud() {
//        let cloud = Cloud(functionJobName: "asyncFunction")
////        cloud.startJob { _ in }
//        cloud.runFunction { result in
//            switch result {
//            case .success(let response):
//                print("Response from cloud function: \(response)")
//            case .failure(let error):
//                assertionFailure("Error calling cloud function: \(error)")
//            }
//        }
    }
}



struct Cloud: ParseCloud {
    typealias ReturnType = Checklist
    var functionJobName: String
    var habit: Habit
    var frequency: Int
    //var argument1: [String: Int] = ["test": 5]
}
